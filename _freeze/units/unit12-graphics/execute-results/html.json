{
  "hash": "b7dcc72b9e3b00d8cb7dcf70eec11f6f",
  "result": {
    "markdown": "---\ntitle: \"Graphics\"\nauthor: \"Chris Paciorek\"\ndate: \"2023-11-26\"\nformat:\n  pdf:\n    documentclass: article\n    margin-left: 30mm\n    margin-right: 30mm\n    toc: true\n  html:\n    theme: cosmo\n    css: ../styles.css\n    toc: true\n    code-copy: true\n    code-block-background: true\nexecute:\n  freeze: auto\nfrom: markdown+tex_math_single_backslash\n---\n\n\n\n[PDF](./unit12-graphics.pdf){.btn .btn-primary}\n\nThis unit discusses some general concepts and principles of\ngraphics, illustrated in some cases with R code. \n\nReferences:\n\n- Adler\n- Chambers\n- Venables and Ripley, Modern Applied Statistics with S\n- Murrell, [R Graphics](http://uclibs.org/PID/110697)\n- [R intro manual](http://cran.r-project.org/doc/manuals/R-intro.html)\n    (R-intro) on CRAN\n- Hadley Wickham, ggplot2: Elegant Graphics for Data Analysis\n\n# 1. Good practices for graphics\n\nThere are a number of principles that can be used in developing and\ncritiquing graphics. Let's skim over the principles and then think about them in the context of some examples, some of which show those\nprinciples being violated.\n\n\n## Best practices\n\nHere's a list of some guidelines to consider in creating graphics.\n\n1.  Have a high density of information to space\n\n2.  Show the data clearly: are the relationships and patterns that are\n    clearly seen in the graph the ones you want to represent?\n\n3.  Can you reorder groups or variables to better illustrate the key\n    points?\n\n4.  Strategies for going beyond two dimensions\n\n    1.  Use color, but avoid if unnecessary (saves printing costs in\n        journal articles, though that may not matter much anymore)\n\n    2.  Use varying symbol or line types\n\n    3.  Use multiple panel plots\n\n5.  Avoid 3-d graphics unless they truly add information\n\n6.  Multi-panel (trellis) plots (called \"small multiples\" when using the same\n    scale/axes) is a key strategy\n\n7.  Think carefully about your baseline (e.g., the lowest level on the\n    y-axis)\n\n    1.  Zero is often a good baseline\n\n    2.  Avoid stacked barplots (see demo code) and other plots with\n        shifting baselines, as it's hard to assess anything except the\n        total and the baseline category.\n\n8.  Studies indicate that humans have a hard time comparing areas,\n    volumes, or angles, so try to avoid plots that represent data using\n    any of these, including pie charts. Instead use position or length\n    (horizontal is better than vertical) to display data values\n\n9.  Label axes and include units\n\n10. Keep the ranges of axes (and other features) the same for multiple\n    panels, when possible\n\n11. Use a legend where appropriate\n\n12. Jitter values if needed so that all the data points can be seen, but\n    if you have too many points to avoid a lot of overplotting, use\n    [strategies discussed below](#overplotting-of-points).\n\n13. Use vector graphics formats such as PDF or Postscript/EPS as these\n    scale without pixelation when resized. Raster formats such as JPEG,\n    PNG, and TIFF don't rescale well and when they have high resolution\n    also have large file sizes. See [Section 3](#graphics-file-formats) for more details.\n\nRob Hyndman has a [list of 20 rules for good\ngraphics](http://robjhyndman.com/hyndsight/graphics/), including some of\nthe ones above. There is also a list of guidelines in [this article](https://www.tandfonline.com/doi/full/10.1080/10618600.2014.989324).\n\n## Some example graphics\n\n1. This [pie chart](trafficking.jpeg) circulating online is intended to raise awareness of human trafficking. What do you\n   like or not like about the graphical presentation? \n\n2.  This [NY Times\n    article](http://www.nytimes.com/interactive/2016/08/08/sports/olympics/history-olympic-dominance-charts.html)\n    presents time-series graphics about how many Olympic medals have\n    been won by different countries. What do you like or not like about\n    the graphical approach?\n\n3.  Consider [this scatterplot of life expectancy statistics](https://academic.oup.com/view-large/figure/81018073/dyr146f2.gif)\n    from [this article](https://academic.oup.com/ije/article/40/6/1703/801755) on variation in lifespan in European countries in the International Journal of Epidemiology. What\n    are you able to learn from this presentation of the data. What other\n    ways could you plot the data to better illustrate patterns in the data?\n\n4.  Here's [another online graphic](exampleGraphic.png). What\n    aspects of the graph could be improved? What aspects do you like?\n\n5.  The file *shell.pdf* in the repository has an example of a crazy pie\n    chart from an advertisement in the NY Times from December 2014.\n\n6.  The article *wainer1984.pdf* in the repository is rather old but the\n    ideas are still relevant and while the example figures are dated in\n    terms of appearance, the same issues arise with more modern-looking\n    graphics.\n\n7.  The article *gelmanUnwin2013.pdf* in the repository presents a\n    modern-day reinterpretation of a famous graphic from Florence\n    Nightingale regarding causes of death in the British Army during the\n    Crimean War in the 1850s.\n\n8.  This [somewhat recent blog](https://www.r-bloggers.com/2021/07/improving-a-visualization/?utm_source=feedburner&utm_medium=email&utm_campaign=Feed%3A+RBloggers+%28R+bloggers%29%20)\n    post nicely discusses the process of improving a visualization\n    regarding streaming services market share in 2020 vs. 2021.\n\n\n# 2. Graphics devices\n\nGraphics are plotted on a *device*. In the old days when computer\nmonitors were not high resolution or in color, this referred to a\nphysical device, but nowadays this is a general term that denotes the\ncontext in which the plot is being made: typically on screen or as a\nfile in a particular file format. The standard device in a UNIX\nenvironment is X11, basically a graphics window set up in the X11\nwindowing system. On-screen plotting is generally done with the software\nyou are using (e.g., Python or R)\ninteracting with a window manager for the operating system.\n\nOften one needs to\niterate to get a plot to look good when printed to a file; in particular\nthe aspect (width to height ratio), the margin sizes relative to the size of the core\nplot, and size of plotting symbols and text relative to the size of the\nplot. In other words, the relative sizes when seen in a graphics window on the\nscreen may be very different when printed to a file.\n\n# 3. Graphics file formats\n\n## Vectorized vs. rasterized file formats\n\n*pdf* images are *vectorized*. What that means is that in general elements of the\nimage are symbolic objects (such as points, text, symbols, line\nsegments, etc.) and when an image is resized, the items rescale\nappropriately for the new size without losing resolution. In contrast,\nwith a *rasterized* format such as *jpeg* or *png* or *tiff*, individual pixels are plotted,\nand when an image is rescaled, in particular enlarged, one is stuck with\nthe resolution that one used in plotting the figure (i.e., one has the\noriginal pixels but if you zoom, you only show some of them, losing\nresolution).\n\nI strongly recommend using vectorized images in most situations.\nThat said, one downside to vectorized images is that with a lot of\npoints or line segments, they can be very large. And for 2-d images, rasterized formats do make some sense inherently,\nthough the other features in the file (such as any text) is also\nrasterized.\n\n\n## Conversion utilities\n\nUNIX has a lot of utilities for converting between image formats.\nWindows and Mac also have GUI-style programs for doing this.\n\nIn UNIX, `pdftops` will convert pdf to postscript and with the optional\nargument `-eps` to encapsulated postscript, while `ps2epsi` will create\nencapsulated postscript. `gs` (Ghostscript) will do a lot of different\nmanipulations of ps and pdf files, including converting to jpeg and\nother formats and merging and splitting pages of pdf files. Here are\nsome examples of command-line calls from within a UNIX shell:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# convert from pdf to jpeg\ngs -dNOPAUSE -r[xres]x[yres] -sDEVICE=jpeg -sOutputFile=file.jpg file.pdf\n\n# extract pages from a pdf\ngs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -dFirstPage=m \\\n   -dLastPage=n -sOutputFile=out.pdf in.pdf \n\n# merge pdf files into one pdf\ngs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf \\\n   -dBATCH in1.pdf in2.pdf in3.pdf \n```\n:::\n\n\n\n# 4. Colors\n\nI haven't converted this section to use Python, but the concepts\nare still relevant in Python or other languages.\n\n## Colors in R\n\nThe default colors can be seen with `palette()`. Using `col=i` in a plot\nuses the ith element of the output of `palette()`. You can change the\npalette:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalette(c(“black”, “yellowgreen”, “purple”)`\n```\n:::\n\n\n\nSee `colors()` for the colors available by name. You can also use RGB\nlevels, discussed next.\n\n## Colorspaces\n\nColors live in a 3-dimensional space that can be parameterized in\nseveral ways. One standard parameterization is RGB, which is a set of\nthree numbers indicating the intensity of red, green and blue. We can\nuse RGB levels to specify colors in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(10); y <- rnorm(10)\nrgb(0.5, 0.75, 0) # each number is specified on scale of [0, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#80BF00\"\n```\n:::\n\n```{.r .cell-code}\nplot(x, y, col = rgb(0.5, 0.75, 0))\n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncol2rgb(\"yellowgreen\") # on scale of {0,...,255}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]\nred    154\ngreen  205\nblue    50\n```\n:::\n:::\n\n\n\n\nNotice `rgb()` gives us back the color as a hexadecimal number\n(`#RRGGBB`), where each of *RR*, *GG*, and *BB* is 2-digit hexadecimal\nnumber (base 16) in the range 0 (00) to 255 (FF), so red is `#FF0000`\n(all red, no green, no blue). A\nstring in this format can be used to specify colors and you'll run\nacross this in R if you work with colors.\n\nAnother parameterization is HSV: *hue*, *saturation* (colorfulness\nmetric), and *value* (brightness). Let's see the demo code to see how\ncolors vary as we change HSV values using *rainbow()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 16\npar(mfrow = c(1,2))\n## rainbow varies hue while keeping s and v constant\npie(rep(1, n), col = rainbow(n, s = .5))  # reduce saturation\npie(rep(1, n), col = rainbow(n, v = .75)) # reduce brightness\n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nA parameterization that uses a more absolute measure of colorfulness\nthan saturation is HCL (hue, chroma, luminance). In the example code below,\nnone of the colors stands out more than the others, unlike\nthe RGB or HSV (see above) based rainbows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(colorspace)\npar(mfrow = c(1,2))\npie(rep(1, n), col = rainbow_hcl(n, c = 70, l = 70), main = 'HCL')\npie(rep(1, n), col = rainbow(n), main = 'RGB')\n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nThe `colorspace` package provides a lot of helpful tools for\nmanipulating colors (including for `ggplot2` and `shiny`), including\ndetermining palettes for qualitative, sequential, and diverging values.\n\n## Color sequences\n\nIf we're using color to illustrate a continuous range of values, we need\na meaningful color sequence. To construct a continuous color set giving\na sequence of colors you can use a variety of color schemes:\n`rainbow()`, `heat.colors()`, `terrain.colors()`, `topo.colors()`,\n`temp.colors()`, and (in the `fields` package), `tim.colors()`. (I know\nthe Tim of `tim.colors`! He likes to fish.)\n\nThe main thing to avoid is a sequence in which the colors do not appear\nto vary smoothly or in some cases may not even appear monotonic. Let's\nexamine a variety of the sequences:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fields) # includes image.plot(), which takes image() and adds a legend; also includes tim.colors\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spam\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSpam version 2.9-1 (2022-08-07) is loaded.\nType 'help( Spam)' or 'demo( spam)' for a short introduction \nand overview of this package.\nHelp for individual functions is also obtained by adding the\nsuffix '.spam' to the function name, e.g. 'help( chol.spam)'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'spam'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    backsolve, forwardsolve\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nTry help(fields) to get started.\n```\n:::\n\n```{.r .cell-code}\nn <- 20; xs <- ys <- 1:n\ngr <- expand.grid(xs, ys)\nU <- chol(exp(-rdist(gr)/6))  \npar(mfrow = c(2, 2))\n\n## rainbow color sequence \nimage.plot(1:n, 1:n, matrix(crossprod(U, rnorm(n^2)), n, n),\n                col = rainbow(32),\n                xlab = '', ylab = '', main = 'rainbow colors')\n\n## heat.colors\nimage.plot(1:n, 1:n, matrix(crossprod(U, rnorm(n^2)), n, n),\n                col = heat.colors(32),\n                xlab = '', ylab = '', main = 'heat colors')\n\n## temp.colors\ntemp.colors <- function(n=25){\n  m <- floor(n/2)\n  blues <- hsv(h=.65, s=seq(1,0,length=m+1)[1:m])\n  reds <- hsv(h=0, s=seq(1,0,length=m+1)[1:m])\n  c(blues,if(n%%2!=0) \"#FFFFFF\", reds[m:1])\n}\n\nimage.plot(1:n, 1:n, matrix(crossprod(U, rnorm(n^2)), n, n),\n                col = temp.colors(33), zlim = c(-3.5, 3.5),\n                xlab = '', ylab = '', main = 'temp colors')\n ## here I force zlim to be symmetric about zero and use an odd number (33) of levels so that the midpoint is white\n           \n## tim.colors\nimage.plot(1:n, 1:n, matrix(crossprod(U, rnorm(n^2)), n, n),\n                col = tim.colors(32),\n                xlab = '', ylab = '', main = 'tim colors')\n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n`temp.colors()` is a good blue-to-red \"diverging\" color scheme that\nemphasizes magnitudes around a central point, with two hues - one for\neach direction.\n\nThe `RColorBrewer` package is good for choosing colors for unordered\nlevels, sequential ordering, and two-way diverging color ordering and\nthe `ColorBrewer` website provides recommendations. We'll see an example\nin the section on mapping.\n\n## Overplotting of points\n\nAs a sidenote, if you have a scatterplot with many points that will\noverplot each other (as well as creating a huge file if using a vectorized format), consider the\n`scatterSmooth()` function as well as the `hexbin` package. The former\ncreates a two-d density plots with outlying individual points included,\nwhile the latter creates an empirical two-d density by binning into\nhexagonal areas. A third approach is to have your color be partly\ntransparent, so that overplotting results in darker colors. Note that\nthis may not work on all devices. We can specify transparency level as\neither the 4th number in `rgb()` on a scale of 0 (transparent) to 1\n(opaque - the default), or as a fourth hexadecimal number on the scale\nof 00 to FF (0 to 255); e.g., `#FF000080` would be half-transparent red,\nsince 80 is one-half of FF in base 16.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(hexbin, quietly = TRUE)\nx <- rnorm(10000); y <- rnorm(10000)\npar(mfrow = c(1, 3))\nplot(x, y, main = 'naive')\nsmoothScatter(x, y, main = 'scatterSmooth')\nplot(x, y, col = rgb(0, 0, 0, .1), pch = 16, \n  cex = .5, main = 'transparency') \n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\nbin <- hexbin(x,y)\nplot(bin, main = 'hexbin') \n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Colorblindness\n\nOne thing to be aware of is that 7-8% of men are color blind. As we see\nin the demo code, the standard result of this is to make it difficult to\ndistinguish red and green, so one may want to avoid color schemes that\nhave both of these in them. We can use `dichromat()` from the\n`dichromat` package to assess the effect of colorblindness on viewing of\none's images.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dichromat)\nshowpal <- function(colors){ # helper function to show colors\n  n <- length(colors)\n  plot(1:n, rep(1, n), col = colors, pch = 16, cex = 4)\n}\n\ndev.off() # close the graphics windows to clear out old color stuff\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnull device \n          1 \n```\n:::\n\n```{.r .cell-code}\npar(mfrow=c(2, 1))\nshowpal(palette()) # show default palette colors\n# here's how those look with standard colorblindness\nshowpal(dichromat(palette()))  \n```\n:::\n\n\n\nI like `fields::tim.colors()` for spatial images. How does it do in terms of color-blindness?\nBased on the images below, not too bad.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fields, quietly = TRUE)\nn <- 20; xs <- ys <- 1:n\ngr <- expand.grid(xs, ys);\nU <- chol(exp(-rdist(gr)/6)) \npar(mfrow = c(1, 2))\nvals <- matrix(crossprod(U, rnorm(n^2)), n, n)\n## how does tim.colors fair with color-blindness?\nimage.plot(1:n, 1:n, vals, col = tim.colors(32),\n                xlab = '', ylab = '', main = 'ordinary vision') \nimage.plot(1:n, 1:n, vals,\n     col = dichromat(tim.colors(32)),  # actually not too bad\n     xlab = '', ylab = '', main = 'colorblind vision') \n```\n\n::: {.cell-output-display}\n![](unit12-graphics_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "unit12-graphics_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}