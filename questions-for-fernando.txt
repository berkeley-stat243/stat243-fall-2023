Namespaces appear to be run-time objects. So a package doesn't have a namespace per se (unlike in R), but there is a namespace created when a package is imported. One can add objects to such a namespace, so that suggests saying a package has a namespace is not quite right.

If a namespace is the mapping of refs to objects why does `help(dir)` talk about scope rather than namespace? Any general suggestions for clearly discussing namespace vs. scope?

Are `return` and `del` statements or functions? Why are `return(x)` and `del(x)` allowed?

What is the name of the default global scope (distinguished from the global scope of a module) of a Python session? Is it `__main__`?

Is there a notion of a pointer to the enclosing scope in a given scope? How can one see the enclosing scope? Does it have a label/id?

If one has a package with multiple modules (files) what is the most Pythonic way to import the objects in the modules - (1) use `from mypkg.mod import *` in `__init__.py` so one can use `mypkg.foo` or (2) referring to individual modules as `mypkg.mymod.foo`? I.e., are the files a convenient way to organize code or user-facing structure?

Questions embedded in the unit 5 document:

Is my bullet list (unit5-programming.html#overview-1) of what happens when a function is evaluated in Python correct?

See my questions about closures (unit5-programming.html#closures).

See my question about why `id(x)` doesn't change when using `x.append()`. (unit5-programming.html#pre-allocating-memory)

Also, I tried to illustrate use of the CPU cache by doing calculations row-wise or column-wise using list comprehension but strangely it doesn't matter (unit5-programming.html#cache-aware-programming). Let me know if you ahve any ideas. (
